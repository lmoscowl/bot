import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from dotenv import load_dotenv
import sqlite3

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('gold_requests.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS requests
             (id INTEGER PRIMARY KEY, user_id INTEGER, city TEXT, weight REAL, value REAL, status TEXT)''')
conn.commit()

# –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìç –ù–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª", "üí∞ –û—Ü–µ–Ω–∏—Ç—å –∑–æ–ª–æ—Ç–æ", "üõí –ö—É–ø–∏—Ç—å —Å–ª–∏—Ç–æ–∫", "üì§ –ü—Ä–æ–¥–∞—Ç—å –∑–æ–ª–æ—Ç–æ", "üë§ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
@dp.message_handler(lambda message: message.text == "üìç –ù–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª")
async def find_terminal(message: types.Message):
    terminals = [
        {"city": "–ú–æ—Å–∫–≤–∞", "address": "—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 10", "hours": "9:00-18:00", "link": "https://maps.google.com/?q=–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 10"},
        {"city": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "address": "—É–ª. –ù–µ–≤—Å–∫–∏–π, 5", "hours": "10:00-20:00", "link": "https://maps.google.com/?q=–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, —É–ª. –ù–µ–≤—Å–∫–∏–π, 5"}
    ]
    for terminal in terminals:
        await message.answer(f"–ì–æ—Ä–æ–¥: {terminal['city']}\n–ê–¥—Ä–µ—Å: {terminal['address']}\n–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {terminal['hours']}\n[–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({terminal['link']})", parse_mode=ParseMode.MARKDOWN)

@dp.message_handler(lambda message: message.text == "üí∞ –û—Ü–µ–Ω–∏—Ç—å –∑–æ–ª–æ—Ç–æ")
async def evaluate_gold(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∞–ª–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–æ–ª–æ—Ç–æ, —Å–µ—Ä–µ–±—Ä–æ):")

@dp.message_handler(lambda message: message.text == "üõí –ö—É–ø–∏—Ç—å —Å–ª–∏—Ç–æ–∫")
async def buy_bar(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å —Å–ª–∏—Ç–∫–∞ –∏ –µ–≥–æ –ø—Ä–æ–±—É.")

@dp.message_handler(lambda message: message.text == "üì§ –ü—Ä–æ–¥–∞—Ç—å –∑–æ–ª–æ—Ç–æ")
async def sell_gold(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤–∞—à–µ–≥–æ –∑–æ–ª–æ—Ç–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±—É.")

@dp.message_handler(lambda message: message.text == "üë§ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_requests(message: types.Message):
    c.execute("SELECT * FROM requests WHERE user_id = ?", (message.from_user.id,))
    rows = c.fetchall()
    if rows:
        for row in rows:
            await message.answer(f"–ó–∞—è–≤–∫–∞ ID: {row[0]}\n–ì–æ—Ä–æ–¥: {row[2]}\n–í–µ—Å: {row[3]} –≥\n–°—É–º–º–∞: {row[4]} —Ä—É–±\n–°—Ç–∞—Ç—É—Å: {row[5]}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
